"three.js: A comprehensive 3D library for the web. AnimationAction: Manages the playback of an animation clip. Methods: play(), stop(), reset(). AnimationClip: Stores animation data. Constructor: AnimationClip(name: String, duration: Float, tracks: Array, blendType: Constant). Static methods: .parse(json: Object): AnimationClip .toJSON(clip: AnimationClip): Object .CreateClipsFromJSON(json: Array): Array .findByName(clips: Array, name: String): AnimationClip. Properties: .name: String .tracks: Array .duration: Float .uuid: String .blendMode: Constant .results: Object. Methods: .reset(): AnimationClip .play(): AnimationClip .stop(): AnimationClip .enableBlending(blendType: Constant): AnimationClip .optimize(): AnimationClip .validate(): Boolean .clone(): AnimationClip AnimationMixer: Manages the playback of animation clips. Parameters: root, Optional: clock. Methods: clipAction(name, clip), update(deltaTime). Return: AnimationMixer object, AnimationAction. AnimationObjectGroup: Used to add multiple objects to an animation mixer. .add(object: Object3D): Adds an object to the group. .remove(object: Object3D): Removes an object from the group. AnimationUtils. Utility functions for animation system. Methods: arraySlice(array:Array, from:Integer, to:Integer), convertArray(array:Array, type:constructor, forceClone:Boolean), isTypedArray(object:Object), makeAnimationGroup(clip:AnimationClip, ...rest:AnimationClip), nextFrame(frameCount:Integer, wrap:Boolean, frameRate:Float), parse(json:JSON), toJSON(clip:AnimationClip). KeyframeTrack class in three.js for animation keyframe tracks. PropertyBinding. Used internally by the animation system to bind a property of a target object to a source. PropertyMixer: Manages animation of a specific property of an object. Parameters: root, path, valueType. BooleanKeyframeTrack: (name, times, values) A keyframe track for boolean values. ColorKeyframeTrack: KeyframeTrack for a Color property. Parameters: name, times, values. Values are colors. NumberKeyframeTrack is a class in three.js for animating numeric properties. constructor: NumberKeyframeTrack(name, times, values). QuaternionKeyframeTrack(name, times, values, interpolation): Animation track for quaternion keyframe values. StringKeyframeTrack class stores string keyframe values for animation. new StringKeyframeTrack(name:String, times:Array<Float>, values:Array<String>). Properties: name, times, values. VectorKeyframeTrack: Tracks vector-based keyframe animation data. Audio: Represents positional audio. Constructor: `Audio(listener)`. Methods: `load(url)`, `play()`, `pause()`, `stop()`, `setVolume(volume)`, `setLoop(boolean)`. For spatial sound. AudioAnalyser. Used to get the waveform and frequency data from an Audio object. AudioContext handles audio playback & processing. Manages audio nodes (gain, filters, etc). Creates audio listeners, decoders. AudioListener() Manages the audio context and is used for spatial audio. PositionalAudio(listener: AudioListener) Extends Audio. Represents an audio source that emits from a specific 3D position. ArrayCamera extends Camera. Used for rendering the scene from multiple viewpoints simultaneously. Camera - Abstract base class for cameras. Properties: position, rotation, up, projectionMatrix. Methods: lookAt(target), updateProjectionMatrix(). Manages camera parameters and transformations. CubeCamera(near, far, renderTarget) Creates a cube camera. near: near plane. far: far plane. renderTarget: render target. OrthographicCamera is a camera class for orthographic projection. PerspectiveCamera extends Camera. Simulates perspective projection. Parameters: fov, aspect, near, far. StereoCamera() Creates a stereo camera. Used for stereoscopic 3D rendering. Animation constants. Used internally. BufferAttributeUsage: Constants for specifying how a buffer attribute's data will be used (e.g., static, dynamic). Core: constants. DRAW_MODES: TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode. COLORS: NoColors, FaceColors, VertexColors. SHADING_MODES: FlatShading, SmoothShading. SIDE: FrontSide, BackSide, DoubleSide. CustomBlendingEquations: Constants defining custom blending equations. Constants: ADD, SUBTRACT, REVERSE_SUBTRACT, MIN, MAX. Materials: Constants defining material blending equations, side orientations, and other material properties. Constants for WebGLRenderer. Textures: Constants for textures. Includes: NearestFilter, LinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping, etc. Defines texture parameters. BufferAttribute(array array, itemSize int, normalized bool) Represents generic buffer attributes. array: array or TypedArray. itemSize: int. normalized: bool. BufferAttribute stores data like vertices, colors. Data is stored in a typed array. Types include Float32Array, Int32Array, etc. Used by BufferGeometry. BufferGeometry is a class for efficient geometry data using buffers. Clock: Used for keeping track of time. Methods: .getDelta(), .getElapsedTime(), .start(), .stop() EventDispatcher: Base class for dispatching events. addEventListener(type, listener): type: string, listener: function. removeEventListener(type, listener): type: string, listener: function. dispatchEvent(event): event: Object. hasEventListener(type, listener): type: string, listener: function. Returns boolean. GLBufferAttribute - wrapper for WebGL buffer attributes. Direct manipulation of buffer data. Constructor: GLBufferAttribute(buffer type itemSize normalized offset count). InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute): Represents per-instance data. Parameters: array (Float32Array or similar), itemSize (number of elements per instance), normalized (boolean), meshPerAttribute (number). Extends BufferAttribute. InstancedBufferGeometry() A geometry class for efficiently rendering multiple instances of the same object. Extends BufferGeometry. InstancedInterleavedBuffer is used for storing instance-specific attributes in an interleaved buffer, optimized for instanced rendering. Extends InterleavedBuffer. InterleavedBuffer(array, stride) Creates an interleaved buffer. array: data. stride: number of components. InterleavedBufferAttribute(buffer InterleavedBuffer, itemSize int, offset int, normalized bool) Represents an attribute of an InterleavedBuffer. buffer: InterleavedBuffer. itemSize: int. offset: int. normalized: bool. Layers is a class in three.js for managing object layers for visibility control. Object3D() Creates a base class for all scene graph objects. Includes properties for position, rotation, scale. Raycaster: Class for raycasting to find intersections with objects. Uniform is a class representing a shader uniform. Uniform(value, type): value is the initial value. Possible types: 'f', 'i', 'v2', 'v3', 'v4', 'c', 'm4', 't', 'fv1', 'iv1', 'v2v', 'v3v', 'v4v', 'm4v', 'tv'. Controls is a base class for Three.js controls like OrbitControls, FirstPersonControls etc. Curve: Abstract base class for creating curves. Methods: getPoint(t), getTangent(t). CurvePath is a class in three.js to manage a path made of multiple curves. methods: .add(curve), .closePath(), .getPoint(t), .getPoints(divisions), .getLength(), .getLengths(). Interpolations - Defines interpolation functions: CatmullRom(t, p0, p1, p2, p3), CubicBezier(t, p0, p1, p2, p3), QuadraticBezier(t, p0, p1, p2, p3), Linear(t, p0, p1). t: interpolation parameter, p0, p1, p2, p3: control points. Path Class for 2D paths Constructor Path(points) Methods moveTo(x y) lineTo(x y) quadraticCurveTo(aCPx aCPy aX aY) bezierCurveTo(aCP1x aCP1y aCP2x aCP2y aX aY) splineThru(pts) arcTo(...) ellipseArcTo(...) absarc(...) absellipseArc(...) closePath() getPoints(divisions) getSpacedPoints(divisions) getLength() updateArcLengths() getPointAt(u) getTangentAt(u) getNormalAt(u) getFrenetFrames(segments closed) toJSON() fromJSON(json) addShape(shape) addShapes(shapes) eachCurve(callback) Shape class for creating 2D shapes. ShapePath class for creating paths from shapes. ArcCurve: Creates an arc shape. Parameters: aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise. Methods: .getPoint( t ) three.js API reference documentation listing classes methods and modules. CubicBezierCurve class represents a 3D cubic Bezier curve. new CubicBezierCurve(v0:Vector3, v1:Vector3, v2:Vector3, v3:Vector3). getPoint(t:Float) returns Vector3. getPoints(divisions:Integer) returns Array<Vector3>. CubicBezierCurve3(v0 Vector3, v1 Vector3, v2 Vector3, v3 Vector3) Represents a cubic Bezier curve in 3D space. v0, v1, v2, v3: Vector3 control points. EllipseCurve: Defines an ellipse. Constructor: EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation). Method: getPoint(t). LineCurve extends Curve. Represents a line segment in 3D space. LineCurve3 class for creating a 3D line curve. QuadraticBezierCurve: A quadratic Bezier curve. Parameters: v0, v1, v2 (Vector2 or Vector3). Return: QuadraticBezierCurve object. QuadraticBezierCurve3 Class for 3D quadratic Bezier curves Constructor QuadraticBezierCurve3(v0 v1 v2) Methods getPoint(t optionalTarget) getPointAt(u optionalTarget) getPoints(divisions) getSpacedPoints(divisions) getLength() updateArcLengths() getTangent(t optionalTarget) clone() copy(source) toJSON() fromJSON(json) SplineCurve: Represents a spline curve. Constructor: SplineCurve(points: Array). Properties: points. Methods: getPoint(t: Float, optional target: Vector2), getPoints(points), getUvs(points), clone(), copy(curve) three.js API reference documentation listing classes methods and modules. Earcut utility for polygon triangulation. three.js API reference documentation listing classes methods and modules. PMREMGenerator: Generates Pre-filtered Mipmapped Radiance Environment Maps. ShapeUtils module in three.js for shape utilities. TextureUtils class provides utility functions for textures. Example methods: loadTexture(url:String, mapping:Mapping, onLoad:Function, onError:Function). BoxGeometry is a class for creating box geometries. CapsuleGeometry class for creating capsule shaped geometry. CircleGeometry: Generates a circle geometry. ConeGeometry: Geometry for cones. Constructor: ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength). Creates cone shape. CylinderGeometry extends Geometry. Creates a cylinder. DodecahedronGeometry: Class for creating dodecahedron geometries. EdgesGeometry: Generates edges from a geometry. Parameters: geometry, thresholdAngle. ExtrudeGeometry extends a 2D shape to create a 3D geometry. Parameters: shape (Shape or array of Shapes), options (object). Returns: ExtrudeGeometry object. IcosahedronGeometry creates an icosahedron. Constructor: IcosahedronGeometry(radius: float, detail: int). Properties: parameters: object. LatheGeometry: Class for creating geometries by rotating a 2D shape around an axis. OctahedronGeometry(radius, detail) - Generates octahedron geometries. radius: radius of octahedron. detail: level of detail. PlaneGeometry: Flat rectangular plane geometry. Constructor: width, height, widthSegments, heightSegments. PolyhedronGeometry: Represents a polyhedron geometry. Constructor: PolyhedronGeometry(vertices: Array, indices: Array, radius: Float, detail: Integer). Properties: parameters. Methods: copy(geometry), toJSON() RingGeometry: Creates ring/disc shapes. Constructor: `RingGeometry(innerRadius, outerRadius, segments, thetaStart, thetaLength)`. Params: radii resolution angles. ShapeGeometry: Geometry for a 2D shape. constructor(shapes, options): shapes: Array or Shape, options: Object. options includes curveSegments, material, UV options. . dispose(): Frees the geometry's resources. SphereGeometry creates a sphere. Constructor: SphereGeometry(radius: float, widthSegments: int, heightSegments: int, phiStart: float, phiLength: float, thetaStart: float, thetaLength: float). Properties: parameters: object. TetrahedronGeometry(radius, detail) Creates a tetrahedron geometry. radius: geometry radius. detail: detail level. TorusGeometry class for creating torus (donut) shaped geometry. TorusKnotGeometry extends Geometry. Creates a torus knot. TubeGeometry(path, tubularSegments, radius, radialSegments, closed): Creates a tube geometry. Parameters define shape. Returns TubeGeometry object. WireframeGeometry class generates wireframe from geometry. ArrowHelper - helper to visualize directions using an arrow. Constructor: ArrowHelper(dir origin length color headLength headWidth). AxesHelper(size): Creates axes for visualizing the X, Y and Z axes. Parameters: size (Number). Returns: AxesHelper object. Box3Helper(box, color): Visualize a Box3. BoxHelper. Helper to visualize a Box3 or object oriented bounding box. BoxHelper(object:Object3D, color:Color). object: Object to show box around. color: Color of the helper. update(object:Object3D): Updates helper if object transformed. CameraHelper: Helper object for visualizing a camera. constructor(camera, color): camera: Camera, color: Hex. updateMatrixWorld(): Updates the helper's matrix. dispose(): Removes the helper. DirectionalLightHelper class in three.js for directional light helper. GridHelper: Creates a grid helper object. HemisphereLightHelper: Helper object to visualize a HemisphereLight. PlaneHelper class visual helper for Plane objects. PointLightHelper: A helper to visualize a PointLight. Parameters: light, size, color. PolarGridHelper: A helper object to visualize a polar grid. Parameters: radius, segments, color1, color2. SkeletonHelper: A helper object for visualizing a skeleton. SpotLightHelper: Helper object for a SpotLight. Parameters: light (SpotLight), color (Hex), AmbientLight: Light source illuminating scene objects equally, no direction. Constructor: color, intensity. DirectionalLight: Light source emitting parallel rays in a specific direction. HemisphereLight: Light source simulating outdoor indirect lighting, with sky and ground colors. Light: Base class for lights. Color: Color of the light. shadow: LightShadow; .dispose(): Releases the light from memory. LightProbe: Represents a light probe that captures the lighting of a scene. Inherits from Object3D. PointLight class, a light source emitting light from a single point in all directions. RectAreaLight class creates rectangular area lights. new RectAreaLight(color:Color, intensity:Float, width:Float, height:Float). Properties: color, intensity, width, height, position, rotation, castShadow. DirectionalLightShadow Class for directional light shadows Properties camera mapSize bias normalBias radius Methods dispose clone copy toJSON getFrameExtents getViewport getFrustum updateMatrices getShadowMap getShadowMapSize LightShadow manages shadows for a light source. Methods: constructor(camera: Camera), copy(source: LightShadow), clone(), getFrameExtents(frameExtents: any), getShadowMapSize(), update(light: Light, camera: Camera), dispose(). Properties: camera: Camera, bias: float, normalBias: float, radius: float, map: Texture, mapSize: Vector2, matrix: Matrix4. PointLightShadow extends LightShadow. Creates shadows from PointLight. SpotLightShadow() Extends LightShadow. Shadow projector for SpotLight. SpotLight is a class in three.js for creating spotlights. AnimationLoader: Loads JSON-encoded animations. AudioLoader: Loads audio files. BufferGeometryLoader: Loads BufferGeometry from JSON data. Extends Loader. Cache is a class in three.js for caching loaded resources. CompressedTextureLoader extends Loader. Loads compressed textures. Supports .ktx, .dds formats. CubeTextureLoader: Loads cube textures. Method: load(urls, onLoad, onProgress, onError). DataTextureLoader class for loading data textures. FileLoader loads arbitrary files, such as text or binary data. load(url, onLoad, onProgress, onError): Loads a file from the URL, calls the callbacks. ImageBitmapLoader loads an image and returns an ImageBitmap. load(url, onLoad, onProgress, onError): Loads an image from the URL, calls the callbacks. ImageLoader: Loader for images. load(url, onLoad, onProgress, onError): Load image from URL. setCrossOrigin(crossOrigin). setPath(path). setResponseType(responseType). setRequestHeader(requestHeader). setWithCredentials(useCredentials). loadAsync(url, onProgress): Load image async. Loader: Abstract base class for loaders. Methods: load(url, onLoad, onProgress, onError). LoaderUtils: Utility functions for loaders. Methods: decodeText(buffer): Decodes buffer to text. extractUrlBase(url): Extracts base URL. resolveURL(url, path): Resolves URL. DefaultLoadingManager: Manages loaded resources. LoadingManager: Manages loaded resources. Constructor: LoadingManager(onLoad: Function, onProgress: Function, onError: Function). Methods: .onLoad(): Function .onProgress(): Function .onError(): Function .itemStart(url: String): void .itemEnd(url: String): void .itemError(url: String): void .setURLModifier(urlModifier: Function): this .getHandler(url: String): Loader .addHandler(regex: RegExp, loader: Loader): this .removeHandler(regex: RegExp): this .load(url: String, onLoad: Function, onProgress: Function, onError: Function): any MaterialLoader class in three.js for loading materials. ObjectLoader: Loader for objects/scenes. load(url, onLoad, onProgress, onError): Load object from URL. parse(json, onLoad): Parse JSON. setPath(path). addResourceHandler(handler). removeResourceHandler(handler). loadAsync(url, onProgress): Load object async. TextureLoader. Loads textures. TextureLoader(manager:LoadingManager). manager: LoadingManager. Methods: load(url:String, onLoad:Function, onProgress:Function, onError:Function):Texture. url: URL of texture, onLoad: callback when loaded, onProgress: loading progress callback, onError: error callback. Returns Texture. setCrossOrigin(crossOrigin:String), setPath(path:String), setRequestHeader(requestHeader:Object), setWithCredentials(useCredentials:Boolean). three.js API reference documentation listing classes methods and modules. LineDashedMaterial: Material for rendering dashed lines. Material: Abstract base class for materials. Manages rendering properties like blending depth testing. MeshBasicMaterial - material for rendering geometry with a simple color or texture. Not affected by lights. Properties: color map side transparent opacity. MeshDepthMaterial - material renders geometry by depth. Distance to camera mapped to grayscale. Properties: depthPacking map alphaMap near far. MeshDistanceMaterial: A material that renders the distance from the camera to the mesh. Parameters include: color, map, displacementMap. MeshLambertMaterial extends Material. Uses Lambertian reflectance for diffuse lighting. Parameters: color, emissive, map, etc. Suitable for non-shiny surfaces. MeshMatcapMaterial: A material using a matcap texture. MeshNormalMaterial. Material maps normals to RGB colors. MeshNormalMaterial(parameters:Object). parameters: material parameters. Properties: bumpMap, bumpScale, normalMap, normalMapType, normalScale, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin. Inherits Material properties and methods like clone(), copy(), dispose(), onBeforeCompile(shader, renderer), toJSON(meta). MeshPhongMaterial: A material for phong shading model. Properties: color, specular, shininess, etc. Inherits from Material. MeshPhysicalMaterial extends Material. Simulates physically accurate materials. Parameters include color, roughness, metalness, reflectivity. MeshStandardMaterial(parameters): Standard material following physically based rendering (PBR). Parameters: color, metalness, roughness etc. Returns: MeshStandardMaterial object. MeshToonMaterial extends Material. Used for toon-style shading. PointsMaterial extends Material. For rendering points. RawShaderMaterial - material rendered with custom shaders. Low-level control over rendering. Properties: vertexShader fragmentShader uniforms. ShaderMaterial: Material for custom shaders. Constructor: ShaderMaterial(parameters). Properties: uniforms, vertexShader, fragmentShader, glslVersion. Defines custom appearance using shaders. ShadowMaterial is a material for rendering shadows. Parameters: color (Color, default 0x000000), opacity (Float, default 1). SpriteMaterial class for sprite rendering. new SpriteMaterial(parameters:Object). Parameters: color:Color, map:Texture, alphaMap:Texture, rotation:Float, sizeAttenuation:Boolean, transparent:Boolean, blending:BlendingMode, depthTest:Boolean, depthWrite:Boolean. Box2 - Represents a 2D bounding box. Properties: min, max. Methods: setFromPoints(points), containsPoint(point), intersectsBox(box). Used for 2D geometry bounds testing. Box3 class represents a 3D bounding box. Color represents colors. Methods: set(color), toArray(array, offset), getHex(), getStyle(). Cylindrical: Represents a point in the cylindrical coordinate system. Properties: radius, theta, y. Methods: set(radius, theta, y), setFromVector3(vec3), clone(), copy(cylindrical), toVector3(optional target Vector3) Euler: Represents a rotation in 3D space. Parameters: x, y, z (rotation angles), order (rotation order). Return: Euler object. Frustum class represents a 3D view frustum, used for visibility culling. Interpolant provides a base class for different interpolation algorithms. Method: evaluate(t). t is a float value. CubicInterpolant: Interpolates values using cubic interpolation. Methods: .evaluate( t ) DiscreteInterpolant: Interpolates values discretely. Constructor: DiscreteInterpolant(parameterPositions: Array, sampleValues: Array, sampleSize: Integer, resultBuffer: Array). Methods: .evaluate(t: Float): any. LinearInterpolant: Class that interpolates linearly between two values. constructor(parameterPositions, sampleValues, sampleSize, resultBuffer): parameterPositions: array of numbers, sampleValues: array of numbers, sampleSize: integer, resultBuffer: array of numbers. interpolate_(i1, t0, t1, t): Interpolates the result. Returns interpolated value. QuaternionLinearInterpolant: Class for linear interpolation of quaternions. Line3: Represents a line in 3D space. Methods: .closestPointToPoint(point: Vector3, clampToLine: Boolean, optionalTarget: Vector3): Vector3 .distanceSqToPoint(point: Vector3): Float .equals(line: Line3): Boolean .getCenter(optionalTarget: Vector3): Vector3 .delta(optionalTarget: Vector3): Vector3 .distanceSq(): Float .distance(): Float .at(t: Float, optionalTarget: Vector3): Vector3 .clone(): Line3 .copy(line: Line3): Line3 .applyMatrix4(matrix: Matrix4): Line3 .translate(offset: Vector3): Line3 .set(start: Vector3, end: Vector3): Line3 .setFromPoints(points: Array): Line3 MathUtils provides utility math functions. Functions: degToRad(degrees: float): float, radToDeg(radians: float): float, isPowerOfTwo(value: int): bool, ceilPowerOfTwo(value: int): int, floorPowerOfTwo(value: int): int, generateUUID(): string, clamp(value: float, min: float, max: float): float, euclideanModulo(n: int, m: int): int. Matrix2: 2x2 matrix for 2D transforms. Methods for matrix operations. Matrix3 represents a 3x3 matrix. Methods: set(n11, n12, n13, n21, n22, n23, n31, n32, n33), multiply(m), getInverse(matrix, throwOnDegenerate). Matrix4: Represents a 4x4 matrix. Methods for matrix operations: .multiply(), .makeRotationX(), .makeTranslation(), etc. Plane represents a plane in 3D space. Methods: set(normal, constant), coplanarPoint(), distanceToPoint(point), intersectLine(line), intersectsLine(line), projectPoint(point, target), distanceToPlane(point). Quaternion: Represents a rotation. Properties: x, y, z, w. Methods: set(x, y, z, w), setFromAxisAngle(axis, angle), setFromEuler(euler, order), setFromRotationMatrix(m), setFromUnitVectors(v1, v2), angleTo(q), rotateTowards(q, step), dot(v), lengthSq(), length(), normalize(), multiply(q, q2), premultiply(q), multiplyVectors(a, b), equals(v), clone(), copy(q), inverse(), conjugate(), _onChange(callback), onChange(callback) Ray: Represents a ray in 3D space. Sphere. Represents a 3D sphere. Sphere(center:Vector3, radius:Float). center: Center point. radius: Radius. Properties: center, radius, isSphere. Methods: applyMatrix4(matrix:Matrix4), clampPoint(point:Vector3, target:Vector3), clone(), containsPoint(point:Vector3), copy(sphere:Sphere), distanceToPoint(point:Vector3), equals(sphere:Sphere), getBoundingBox(target:Box3), intersectsBox(box:Box3), intersectsPlane(plane:Plane), intersectsSphere(sphere:Sphere), isEmpty(), makeEmpty(), set(center:Vector3, radius:Float), setFromPoints(points:Array, optionalCenter:Vector3), getSize(), translate(offset:Vector3). Spherical: Represents a point in spherical coordinates. constructor(radius: number, phi: number, theta: number): Creates a Spherical. .set(radius: number, phi: number, theta: number): Sets the values. .makeSafe(): Corrects the phi angle to be within 0 and PI. SphericalHarmonics3: Represents a set of spherical harmonic coefficients. three.js API reference documentation listing classes methods and modules. Vector2 represents a 2D vector. Methods: .add(), .sub(), .multiplyScalar(), .divideScalar(), .length(), .normalize(), .distanceTo(), .clone(), .set(x, y). Vector3 represents a 3D vector. Methods: constructor(x: float, y: float, z: float), set(x: float, y: float, z: float), setScalar(scalar: float), setX(x: float), setY(y: float), setZ(z: float), getX(), getY(), getZ(), copy(v: Vector3), add(v: Vector3), addScalar(s: float), addVectors(a: Vector3, b: Vector3), sub(v: Vector3), subScalar(s: float), subVectors(a: Vector3, b: Vector3), multiply(v: Vector3), multiplyScalar(s: float), multiplyVectors(a: Vector3, b: Vector3), divide(v: Vector3), divideScalar(s: float), divideVectors(a: Vector3, b: Vector3), applyMatrix3(m: Matrix3), applyMatrix4(m: Matrix4), applyQuaternion(q: Quaternion), project(camera: Camera), unproject(camera: Camera), transformDirection(m: Matrix4), angleTo(v: Vector3), distanceTo(v: Vector3), distanceToSquared(v: Vector3), length(), lengthSq(), lengthManhattan(), normalize(), dot(v: Vector3), cross(v: Vector3), crossVectors(a: Vector3, b: Vector3), projectOnVector(v: Vector3), projectOnPlane(planeNormal: Vector3), reflect(v: Vector3), angle(), clone(), fromArray(array: array, offset: int), toArray(array: array, offset: int), fromBufferAttribute(attribute: BufferAttribute, index: int). Properties: x: float, y: float, z: float. Vector4 class represents a 4D vector. BatchedMesh is a class for rendering multiple mesh instances efficiently. Bone: Represents a bone in a skeletal animation. Inherits from Object3D. ClippingGroup Class for clipping planes to object groups Constructor ClippingGroup(objects planes) Properties objects planes Methods dispose() Group: Used to group objects. Methods: add(object), remove(object). InstancedMesh renders multiple copies of the same geometry with different transforms. Parameters: geometry (BufferGeometry), material (Material), count (integer). Methods: getMatrixAt(index, matrix), setMatrixAt(index, matrix), updateMatrixWorld(). Line: Renders lines. Constructor: `Line(geometry, material)`. Uses `LineBasicMaterial` or `LineDashedMaterial`. LineLoop: Represents continuous closed line. Part of three.js objects. LineSegments: Represents a set of connected line segments. constructor(geometry, material): geometry: BufferGeometry or Geometry, material: Material or array of Materials. computeLineDistances(): Computes the line distances. Returns this. dispose(): Frees the geometry's resources. LOD: Level of detail to manage the visual complexity of a 3D object. Mesh: Class for rendering 3D models. Points: Represents a set of points, typically rendered using a PointsMaterial. Parameters include: geometry, material. Skeleton class in three.js for skeletal animation. SkinnedMesh: Renders meshes deformed by a skeleton. Constructor: `SkinnedMesh(geometry, material)`. Used for animated characters. Sprite class represents a 2D image in 3D space. ShaderChunk Contains a collection of pre-written shader code snippets. ShaderLib - Library of built-in shaders. Includes shaders: basic, lambert, phong, standard, physical, depth, normal, matcap, dashed, shadow. Provides access to shader chunks and uniforms. UniformsLib: Contains common uniforms used in shaders, includes: common, aomap, lights, fog, etc. UniformsUtils Utilities for shader uniforms Methods clone(uniforms_src) merge(uniforms_array) WebGL3DRenderTarget: Creates a 3D render target for WebGL. WebGLArrayRenderTarget(width : Integer, height : Integer, depth : Integer) Extends WebGLRenderTarget. Used for rendering to multiple render targets in a 3D texture. WebGLCubeRenderTarget: Render target for cube textures. Constructor: WebGLCubeRenderTarget(size, options). Methods: fromEquirectangularTexture(renderer, texture), setSize(width, height), dispose(). WebGLRenderer: Class for rendering scenes with WebGL. WebGLRenderTarget: Represents a render target for off-screen rendering. Parameters: width, height, options. Return: WebGLRenderTarget object. WebGLProgram: Manages WebGL programs, shaders, compilation, linking within three.js. WebXRManager: Manages WebXR sessions and rendering. Interfaces with WebGLRenderer. Fog: class for linear fog effect in scenes. params: color: Fog color. near: Distance from camera where fog starts. far: Distance where fog ends. FogExp2 defines an exponential fog effect. Parameters: color (Color, default 0xffffff), density (Float, default 0.00025). Scene: The scene holds all objects, lights, and cameras. Methods: add(object), remove(object). CanvasTexture: class for textures from canvas elements. params: canvas: HTML canvas. mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format, type, uvOffset, uvScale, needsUpdate: texture properties. .needsUpdate = true to update. CompressedArrayTexture(mipmaps, width, height, depth, format, texture): Array of compressed textures. CompressedTexture class for compressed texture data. Parameters: mipmaps (array), width (integer), height (integer), format (constant), type (constant). Returns: CompressedTexture object. CubeTexture class, a texture composed of 6 cube faces, used for environment mapping. Data3DTexture is a 3D texture created from raw data. Data3DTexture(data, width, height, depth): data is a TypedArray, containing the pixel data. width, height, depth are dimensions. DataArrayTexture is a class for storing data textures in arrays. DataTexture creates a texture from raw data. Parameters: data (typed array), width (integer), height (integer), format (constant), type (constant), mapping (constant), wrapS (constant), wrapT (constant), aniso (integer). Returns: DataTexture object. DepthTexture: A texture that stores depth information. FramebufferTexture: Represents a texture rendered to a framebuffer. constructor(width: number, height: number, format: number, type: number, internalFormat: number): Creates a FramebufferTexture. Source: Base class for texture sources (e.g., images, videos). Texture: Base class for textures. Constructor: Texture(image: Image, mapping: Constant, wrapS: Constant, wrapT: Constant, magFilter: Constant, minFilter: Constant, format: Constant, type: Constant, anisotropy: Integer, encoding: Constant). Properties: .id: Integer .uuid: String .name: String .image: Image .mipmaps: Array .mapping: Constant .wrapS: Constant .wrapT: Constant .magFilter: Constant .minFilter: Constant .anisotropy: Integer .format: Constant .internalFormat: String .type: Constant .offset: Vector2 .repeat: Vector2 .center: Vector2 .rotation: Float .matrixAutoUpdate: Boolean .matrix: Matrix3 .userData: Object .needsUpdate: Boolean .isCompressedTexture: Boolean. Methods: .clone(): Texture .copy(source: Texture): Texture .transformUv(uv: Vector2): Vector2 .updateMatrix(): this .dispose(): void .toJSON(meta: Object): Object VideoFrameTexture: class for textures from video frames, optimized for performance. params: video: HTMLVideoElement. videoFrame: VideoFrame. format: texture format. .update(): updates texture with current video frame. VideoTexture: Creates a texture from a video element. Parameters: video. Updates automatically. Return: VideoTexture object."